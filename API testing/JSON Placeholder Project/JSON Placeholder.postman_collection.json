{
	"info": {
		"_postman_id": "57ae89cf-eb23-4bdb-bf04-d608a3228557",
		"name": "JSON Placeholder",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25358645"
	},
	"item": [
		{
			"name": "GET posts",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/posts?title_like=facere",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"posts"
					],
					"query": [
						{
							"key": "title_like",
							"value": "facere"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET comments",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Shuld verify response Time\", () => {",
							"    pm.expect(pm.response.responseTime).to.lessThan(100);",
							"})",
							"",
							"pm.test(\"Should verify response status\", () => {",
							"pm.expect(pm.response.status).to.eql(\"OK\");",
							"})",
							"",
							"pm.test(\"Should verify response status type\", () => {",
							"    pm.expect(pm.response.status).to.be.a(\"string\");",
							"})",
							"",
							"pm.test(\"Should verify post ID\", () => {",
							"    const responseBody = pm.response.json();",
							"        pm.expect(responseBody[0].id).to.eql(6);",
							"})",
							"",
							"pm.test(\"Should verify lenght of name\", () => {",
							"    const responseBody = pm.response.json();",
							"    pm.expect(responseBody[1].name).to.have.lengthOf(63);",
							"})",
							"",
							"pm.test(\"Should verify all response email\", () => {",
							"    const responseBody = pm.response.json();",
							"    responseBody.map(obiekt => {",
							"        pm.expect(obiekt.email).to.include(\"@\");",
							"    })",
							"})",
							"",
							"pm.test (\"Should verify response status code\", () => {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
							"})",
							"",
							"pm.test(\"Should verify type content response\", () => {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"})",
							"",
							"pm.test(\"Should verify type content value\", () => {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/comments?postId=4&postId=2",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"comments"
					],
					"query": [
						{
							"key": "postId",
							"value": "4"
						},
						{
							"key": "postId",
							"value": "2"
						},
						{
							"key": "_limit",
							"value": "1",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "POST post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Collection variables\", () => {",
							"    const expectedUrl = pm.collectionVariables.get(\"baseUrl\");",
							"    console.log(expectedUrl);",
							"})",
							"",
							"pm.test(\"Environment variables\", () => {",
							"    const expectedUserName = pm.environment.get(\"userName\");",
							"    console.log(expectedUserName)",
							"})",
							"",
							"pm.test(\"Set global variable\", () => {",
							"    pm.globals.set(\"AAA\", \"BBB\");",
							"})",
							"",
							"pm.test(\"Set collection variable\", () => {",
							"    pm.collectionVariables.set(\"CCC\", \"DDD\");",
							"})",
							"",
							"pm.test(\"Set environment variable\", () => {",
							"    pm.environment.set(\"EEE\", \"FFF\");",
							"})",
							"",
							"pm.test(\"Unset global variable\", () => {",
							"    pm.globals.unset(\"AAA\");",
							"})",
							"",
							"pm.test(\"Unset collection variable\", () => {",
							"    pm.collectionVariables.unset(\"CCC\");",
							"})",
							"",
							"pm.test(\"Unset environment variable\", () => {",
							"    pm.environment.unset(\"EEE\");",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": " {\n    \"userId\": {{userID}},\n    \"id\": 150,\n    \"title\": \"{{postTitle}}\",\n    \"body\": \"{{postBody}}\"\n  }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/posts",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"posts"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT user",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function generatorEmail () {",
							"    const randomNumber = Math.floor(Math.random() * (1000000000 - 1) + 1);",
							"    const randomEmailValue =  \"test\" + randomNumber + \"@example.com\";",
							"    pm.globals.set(\"randomEmail\", randomEmailValue);",
							"}",
							"",
							"generatorEmail()"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": 1,\n    \"name\": \"Leanne Graham\",\n    \"username\": \"{{userName}}\",\n    \"email\": \"{{randomEmail}}\",\n    \"address\": {\n        \"street\": \"Kulas Light\",\n        \"suite\": \"Apt. 556\",\n        \"city\": \"Gwenborough\",\n        \"zipcode\": \"92998-3874\",\n        \"geo\": {\n            \"lat\": \"-37.3159\",\n            \"lng\": \"81.1496\"\n        }\n    },\n    \"phone\": \"1-770-736-8031 x56442\",\n    \"website\": \"hildegard.org\",\n    \"company\": {\n        \"name\": \"Romaguera-Crona\",\n        \"catchPhrase\": \"Multi-layered client-server neural-net\",\n        \"bs\": \"harness real-time e-markets\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE user",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"1"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://jsonplaceholder.typicode.com",
			"type": "string"
		}
	]
}